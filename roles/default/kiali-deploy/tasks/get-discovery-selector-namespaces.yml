# These tasks are not performed if cluster_wide_access is true - this is because the operator will
# grant Kiali permission to see all namespaces via ClusterRole, so the operator does not need to
# process discovery selectors.
#
# These tasks are performed if cluster wide access is false - this is because the operator will
# need to create Roles in all the namespaces found by the discovery selectors so Kiali can be
# granted permission to see those namespaces (but only those namespaces).
#
# These tasks will use discovery selectors found in the Kiali configuration setting
# spec.deployment.discovery_selectors["default"]. These discovery selectors will be used to discover
# namespaces that Kiali should be given access to.
#
# When these tasks finish, "discovery_selector_namespaces" will be a list of namespaces discovered by the selectors.
#
# NOTE: Regardless of what discovery selectors are defined, the Kiali Operator should always give the server
# access to the Kiali Server deployment namespace and the Istio control plane namespace. But that is
# not done here - these tasks simply scan all namespaces and match them to selectors. The operator
# will add those two namespaces later if appropriate.
#
# NOTE: These tasks specifically ignore Istio's own discovery selectors found in Istio meshConfig.

- name: Get Kiali discovery selectors if they are defined
  set_fact:
    discovery_selectors: "{{ kiali_vars.deployment.discovery_selectors.default }}"
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - kiali_vars.deployment.discovery_selectors.default is defined

- name: If cluster wide access is disabled and no discovery selectors are found, warn the user that this is probably not what they want
  debug:
    msg: "Cluster wide access is disabled, but no discovery selectors were specified. You likely will want to define discovery selectors in the Kiali CR."
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - kiali_vars.discovery_selectors.default is not defined
  - discovery_selectors is not defined

- name: Find namespaces selected by the discovery selectors
  set_fact:
    discovery_selector_namespaces_raw: "{{ (discovery_selector_namespaces_raw|default([]) + query(k8s_plugin, kind='Namespace', label_selector=(item|join(',')))) | unique }}"
  loop: "{{ discovery_selectors | parse_selectors }}"
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - discovery_selectors is defined

- name: Get just the names of the discovered namespaces
  set_fact:
    discovery_selector_namespaces: "{{ discovery_selector_namespaces|default([]) + [item.metadata.name] }}"
  loop: "{{ discovery_selector_namespaces_raw|default([]) }}"
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - discovery_selector_namespaces_raw is defined

- name: Garbage collect discovered namespaces to free up space
  set_fact:
    discovery_selector_namespaces_raw: []
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - discovery_selector_namespaces_raw is defined

- name: If no namespaces were discovered, make sure discovery_selector_namespaces is set to an empty list
  set_fact:
    discovery_selector_namespaces: []
  when:
  - kiali_vars.deployment.cluster_wide_access == False
  - discovery_selector_namespaces is not defined