# These tasks remove all Kiali resources such that no remnants of Kiali will remain.
#
# Note that we ignore_errors everywhere - we do not want these tasks to ever abort with a failure.
# This is because these are run within a finalizer and if a failure aborts any task here
# the user will never be able to delete the Kiali CR - in fact, the delete will hang indefinitely
# and the user will need to do an ugly hack to fix it.

- name: Get information about the cluster
  ignore_errors: yes
  set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"
  when:
  - is_openshift == False
  - is_k8s == False

- name: Determine the cluster type
  ignore_errors: yes
  set_fact:
    is_openshift: "{{ True if 'route.openshift.io' in api_groups else False }}"
    is_k8s: "{{ False if 'route.openshift.io' in api_groups else True }}"
  when:
  - is_openshift == False
  - is_k8s == False

# Indicate what kind of cluster we are in (OpenShift or Kubernetes).
- ignore_errors: yes
  debug:
    msg: "CLUSTER TYPE: is_openshift={{ is_openshift }}; is_k8s={{ is_k8s }}"

- name: Print some debug information
  ignore_errors: yes
  vars:
    msg: |
        Kiali Variables:
        --------------------------------
        {{ kiali_vars | to_nice_yaml }}
  debug:
    msg: "{{ msg.split('\n') }}"

- name: Set default deployment namespace to the same namespace where the CR lives
  ignore_errors: yes
  vars:
    current_cr: "{{ _kiali_io_kiali }}"
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'deployment': {'namespace': current_cr.metadata.namespace}}, recursive=True) }}"
  when:
  - kiali_vars.deployment.namespace is not defined or kiali_vars.deployment.namespace == ""

- name: Set default istio namespace
  ignore_errors: yes
  set_fact:
    kiali_vars: "{{ kiali_vars | combine({'istio_namespace': kiali_vars.deployment.namespace}, recursive=True) }}"
  when:
  - kiali_vars.istio_namespace == ""

- name: Find all namespaces (this is limited to what the operator has permission to see)
  ignore_errors: yes
  set_fact:
    all_namespaces: "{{ lookup('k8s', api_version='v1', kind='Namespace') | default({}) | json_query('[].metadata.name') }}"

# When the Operator installed Kiali, the configmap has accessible_namespaces set.
# There are no regexes in the configmap; they are all full namespace names.
# NOTE: there is a special value of accessible_namespaces of two asterisks ("**")
# which indicates Kiali is given access to all namespaces via a single cluster role
# not individual roles in each accessible namespace.

- name: Find current configmap, if it exists
  ignore_errors: yes
  set_fact:
    current_configmap: "{{ lookup('k8s', resource_name='kiali', namespace=kiali_vars.deployment.namespace, api_version='v1', kind='ConfigMap') }}"
- name: Find currently accessible namespaces
  ignore_errors: yes
  set_fact:
    current_accessible_namespaces: "{{ current_configmap.data['config.yaml'] | from_yaml | json_query('deployment.accessible_namespaces') }}"
  when:
  - current_configmap is defined
  - current_configmap.data is defined
  - current_configmap.data['config.yaml'] is defined

- name: Delete all additional Kiali roles in current accessible namespaces
  ignore_errors: yes
  k8s:
    state: absent
    definition: |
      {% for namespace in current_accessible_namespaces %}
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: kiali
        namespace: "{{ namespace }}"
      ...
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: kiali
        namespace: "{{ namespace }}"
      ...
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: kiali-viewer
        namespace: "{{ namespace }}"
      ...
      {% endfor %}
  when:
  - current_accessible_namespaces is defined
  - '"**" not in current_accessible_namespaces'

- name: Find currently configured label selector
  ignore_errors: yes
  set_fact:
    current_label_selector: "{{ current_configmap.data['config.yaml'] | from_yaml | json_query('api.namespaces.label_selector') }}"
  when:
  - current_configmap is defined
  - current_configmap.data is defined
  - current_configmap.data['config.yaml'] is defined

- name: Remove Kiali label from namespaces found in current accessible namespaces
  ignore_errors: yes
  vars:
    # everything to the left of the = is the name of the label we want to remove
    the_namespace_label_name: "{{ current_label_selector | regex_replace('^(.*)=.*$', '\\1') }}"
  # if a namespace happened to have been deleted, we do not want to (nor can we) resurrect it, hence we check for its existence
  k8s:
    state: present
    definition: |
      {% for namespace in current_accessible_namespaces %}
      {% if namespace in all_namespaces %}
      ---
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        labels:
          {{ the_namespace_label_name }}: null
      ...
      {% endif %}
      {% endfor %}
  when:
  - current_accessible_namespaces is defined
  - '"**" not in current_accessible_namespaces'
  - current_label_selector is defined

- name: Delete Kiali cluster roles
  ignore_errors: yes
  include_tasks: remove-clusterroles.yml
  when:
  - current_accessible_namespaces is defined
  - '"**" in current_accessible_namespaces'

- name: Delete Kiali resources
  ignore_errors: yes
  k8s:
    state: absent
    api_version: "{{ k8s_item.apiVersion }}"
    kind: "{{ k8s_item.kind }}"
    namespace: "{{ kiali_vars.deployment.namespace }}"
    name: "{{ k8s_item.metadata.name }}"
  register: delete_result
  until: delete_result.result == {} or (delete_result.result.status is defined and delete_result.result.status == "Success")
  retries: 6
  delay: 10
  when:
  - k8s_item is defined
  - k8s_item.apiVersion is defined
  - k8s_item.kind is defined
  - k8s_item.metadata is defined
  - k8s_item.metadata.name is defined
  with_items:
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='HorizontalPodAutoscaler', resource_name='kiali', api_version=kiali_vars.deployment.hpa.api_version) }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Ingress', resource_name='kiali', api_version='networking.k8s.io/v1beta1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Deployment', resource_name='kiali', api_version='apps/v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='ReplicaSet', resource_name='kiali', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Pod', resource_name='kiali', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Service', resource_name='kiali', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='ServiceAccount', resource_name='kiali-service-account', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='RoleBinding', resource_name='kiali', api_version='rbac.authorization.k8s.io/v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Role', resource_name='kiali', api_version='rbac.authorization.k8s.io/v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Role', resource_name='kiali-viewer', api_version='rbac.authorization.k8s.io/v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='ConfigMap', resource_name='kiali', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='MonitoringDashboard', api_version='monitoring.kiali.io/v1alpha1') }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Secret', resource_name='kiali-signing-key', api_version='v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.istio_namespace, kind='RoleBinding', resource_name='kiali-controlplane', api_version='rbac.authorization.k8s.io/v1') }}"
  - "{{ query('k8s', namespace=kiali_vars.istio_namespace, kind='Role', resource_name='kiali-controlplane', api_version='rbac.authorization.k8s.io/v1') }}"
  loop_control:
    loop_var: k8s_item

- name: Delete OpenShift-specific Kiali resources
  ignore_errors: yes
  k8s:
    state: absent
    api_version: "{{ os_item.apiVersion }}"
    kind: "{{ os_item.kind }}"
    namespace: "{{ kiali_vars.deployment.namespace }}"
    name: "{{ os_item.metadata.name }}"
  register: delete_result
  until: delete_result.result is defined
  retries: 10
  delay: 2
  when:
  - is_openshift == True
  - os_item is defined
  - os_item.apiVersion is defined
  - os_item.kind is defined
  - os_item.metadata is defined
  - os_item.metadata.name is defined
  with_items:
  - "{{ query('k8s', kind='OAuthClient', resource_name='kiali-' + kiali_vars.deployment.namespace, api_version='oauth.openshift.io/v1') if is_openshift == True else [] }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='Route', resource_name='kiali', api_version='route.openshift.io/v1') if is_openshift == True else [] }}"
  - "{{ query('k8s', namespace=kiali_vars.deployment.namespace, kind='ConfigMap', resource_name='kiali-cabundle', api_version='v1') if is_openshift == True else [] }}"
  loop_control:
    loop_var: os_item

- name: Delete OpenShift-specific Kiali ConsoleLinks
  ignore_errors: yes
  k8s:
    state: absent
    definition: |
      {% for cl in query('k8s', kind='ConsoleLink', label_selector='kiali.io/home=' + kiali_vars.deployment.namespace) %}
      ---
      apiVersion: "{{ cl.apiVersion }}"
      kind: "{{ cl.kind }}"
      metadata:
        name: "{{ cl.metadata.name }}"
      ...
      {% endfor %}
  when:
  - is_openshift == True
