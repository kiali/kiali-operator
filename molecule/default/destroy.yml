- name: Destroy
  hosts: localhost
  connection: local
  tasks:
  - name: Remove Kiali CR
    vars:
      custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
    k8s:
      state: absent
      api_version: kiali.io/v1alpha1
      kind: Kiali
      namespace: "{{ cr_namespace }}"
      name: "{{ custom_resource.metadata.name }}"
      wait: yes
      wait_timeout: 600

  - name: Produce Files with Correct Parameters
    shell: " {{ item }}"
    with_items:
    - cat {{ kiali_operator_assets_path }}/namespace.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_NAMESPACE={{ kiali.operator_namespace }}  envsubst
    - cat {{ kiali_operator_assets_path }}/crd.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} envsubst
    - cat {{ kiali_operator_assets_path }}/role_binding.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_NAMESPACE={{ kiali.operator_namespace }} envsubst
    - cat {{ kiali_operator_assets_path }}/service_account.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} envsubst
    - cat {{ kiali_operator_assets_path }}/operator.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_IMAGE_NAME={{ kiali.operator_image_name}} OPERATOR_IMAGE_VERSION={{ kiali.operator_version }} OPERATOR_IMAGE_PULL_POLICY={{ kiali.image_pull_policy}} OPERATOR_WATCH_NAMESPACE={{ kiali.operator_watch_namespace }} envsubst
    - cat {{ kiali_operator_assets_path }}/role.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_ROLE_CLUSTERROLEBINDINGS="{{ kiali.operator_clusterrolebindings}}" OPERATOR_ROLE_CLUSTERROLES="{{ kiali.operator_clusterroles }}" OPERATOR_ROLE_CREATE="{{ kiali.operator_role_create | default('- create') }}" OPERATOR_ROLE_DELETE="{{ kiali.operator_role_delete | default('- delete') }}" OPERATOR_ROLE_PATCH="{{ kiali.operator_role_patch | default('- patch') }}" envsubst
    register: template

  - name: Parse Template Yaml Files
    set_fact:
      namespace: "{{ (template.results[0].stdout | from_yaml_all | list)[0] }}"
      crd0: "{{ (template.results[1].stdout | from_yaml_all | list)[0] }}"
      crd1: "{{ (template.results[1].stdout | from_yaml_all | list)[1] }}"
      role_binding: "{{ (template.results[2].stdout | from_yaml_all | list)[0] }}"
      service_account: "{{ (template.results[3].stdout | from_yaml_all | list)[0] }}"
      operator: "{{ (template.results[4].stdout | from_yaml_all | list)[0] }}"
      role: "{{ (template.results[5].stdout | from_yaml_all | list)[0] }}"

  - name: Combine Namespace on the Files that need it
    set_fact:
      service_account: "{{ service_account | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      role_binding: "{{ role_binding | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      role: "{{ role | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      operator: "{{ operator | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"

  # Wait for the last things to be removed (which are the configmap and monitoring dashboards). This avoids the namespace-stuck-problem.
  - name: Wait for Kiali ConfigMap to be uninstalled
    k8s_facts:
      api_version: v1
      kind: ConfigMap
      namespace: "{{ kiali.install_namespace }}"
      name: kiali
    register: doomed_list
    until:
    - doomed_list | default({}) | json_query("resources[*]") | length == 0
    retries: 60
    delay: 5

  - name: Wait for Kiali MonitoringDashboards to be uninstalled
    k8s_facts:
      api_version: monitoring.kiali.io/v1alpha1
      kind: MonitoringDashboard
      namespace: "{{ kiali.install_namespace }}"
    register: doomed_list
    until:
    - doomed_list | default({}) | json_query("resources[*]") | length == 0
    retries: 60
    delay: 5

  - name: Removing First Custom Resource Definition
    k8s:
      state: absent
      definition: "{{ crd0 }}"
      wait: yes

  - name: Removing Second Custom Resource Definition
    k8s:
      state: absent
      definition: "{{ crd1 }}"
      wait: yes

  - name: Removing Role
    k8s:
      state: absent
      definition: "{{ role }}"
      wait: yes

  - name: Removing Role Binding
    k8s:
      state: absent
      definition: "{{ role_binding }}"
      wait: yes

  - name: Removing Service Account
    k8s:
      state: absent
      definition: "{{ service_account  }}"
      wait: yes

  - name: Removing Operator Deployment
    k8s:
      state: absent
      definition: "{{ operator }}"
      wait: yes

  - name: Removing Operator namespace
    k8s:
      state: absent
      definition: "{{ namespace }}"
      wait: yes
    when:
    - kiali.operator_namespace != istio.control_plane_namespace

  - name: Removing CR namespace if it is different than control plan and operator namespace
    k8s:
      state: absent
      api_version: v1
      kind: Namespace
      name: "{{ cr_namespace }}"
      wait: yes
    when:
    - cr_namespace != istio.control_plane_namespace
    - cr_namespace != kiali.operator_namespace
