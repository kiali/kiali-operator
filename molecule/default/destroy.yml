- name: Destroy
  hosts: localhost
  connection: local
  tasks:

  - name: Get information about the cluster
    set_fact:
      api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"
  - name: Determine the Istio implementation
    set_fact:
      is_maistra: "{{ True if 'maistra.io' in api_groups else False }}"

  - name: Remove Kiali CR
    vars:
      custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
    k8s:
      state: absent
      api_version: kiali.io/v1alpha1
      kind: Kiali
      namespace: "{{ cr_namespace }}"
      name: "{{ custom_resource.metadata.name }}"
      wait: yes
      wait_timeout: 600
    ignore_errors: yes

  # Wait for the last things to be removed (which are the configmap and monitoring dashboards). This avoids the namespace-stuck-problem.
  - name: Wait for Kiali ConfigMap to be uninstalled
    k8s_info:
      api_version: v1
      kind: ConfigMap
      namespace: "{{ kiali.install_namespace }}"
      name: kiali
    register: doomed_list
    until:
    - doomed_list is success
    - doomed_list | json_query("resources[*]") | length == 0
    retries: "{{ wait_retries }}"
    delay: 5

  - name: Wait for Kiali MonitoringDashboards to be uninstalled
    k8s_info:
      api_version: monitoring.kiali.io/v1alpha1
      kind: MonitoringDashboard
      namespace: "{{ kiali.install_namespace }}"
    register: doomed_list
    until:
    - doomed_list is success
    - doomed_list | json_query("resources[*]") | length == 0
    retries: "{{ wait_retries }}"
    delay: 5

  - name: Delete any NetworkPolicy that was created
    import_tasks: process-network-policy.yml
    vars:
      network_policy_state: "absent"
      network_policy_namespace: "{{ kiali.install_namespace }}"

  - name: Uninstall Operator via Helm
    command:
      argv:
      - "helm"
      - "uninstall"
      - "--namespace={{ kiali.operator_namespace }}"
      - "--debug"
      - "kiali-operator"
    ignore_errors: yes

  # Helm does not uninstall CRDs, we need to do it here
  - name: Remove CRDs
    vars:
      crds_yaml: "{{ lookup('env', 'MOLECULE_HELM_CHARTS_REPO') + '/kiali-operator/crds/crds.yaml' }}"
    k8s:
      state: absent
      src: "{{ crds_yaml }}"
      wait: yes
    ignore_errors: yes

  - name: Removing Operator namespace
    k8s:
      state: absent
      api_version: v1
      kind: Namespace
      name: "{{ kiali.operator_namespace }}"
      wait: yes
    when:
    - kiali.operator_namespace != istio.control_plane_namespace

  - name: Removing CR namespace if it is different than control plan and operator namespace
    k8s:
      state: absent
      api_version: v1
      kind: Namespace
      name: "{{ cr_namespace }}"
      wait: yes
    when:
    - cr_namespace != istio.control_plane_namespace
    - cr_namespace != kiali.operator_namespace
