- name: Prepare
  hosts: localhost
  connection: local
  tasks:

  - name: Get information about the cluster
    set_fact:
      api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"
  - name: Determine the Istio implementation
    set_fact:
      is_maistra: "{{ True if 'maistra.io' in api_groups else False }}"

  - name: See if we have Service Mesh htpasswd secret for accessing external services like Prometheus
    k8s_info:
      api_version: v1
      kind: Secret
      namespace: "{{ istio.control_plane_namespace }}"
      name: htpasswd
    register: ossm_secret_htpasswd_raw
    when:
    - is_maistra == True

  - name: Define url and auth for Prometheus for Service Mesh
    set_fact:
      prometheus_config:
        url: "https://prometheus.{{ istio.control_plane_namespace }}.svc:9090"
        auth:
          username: internal
          type: basic
          use_kiali_token: false
          password: "{{ ossm_secret_htpasswd_raw.resources[0].data.rawPassword | b64decode }}"
    when:
    - ossm_secret_htpasswd_raw is defined
    - ossm_secret_htpasswd_raw.resources is defined
    - ossm_secret_htpasswd_raw.resources | length == 1

  - name: Make sure the operator namespace exists
    k8s:
      state: present
      api_version: v1
      kind: Namespace
      name: "{{ kiali.operator_namespace }}"

  - name: Find the latest Helm Chart
    shell: "ls -dt1 {{ lookup('env', 'MOLECULE_HELM_CHARTS_REPO') }}/_output/charts/kiali-operator*.tgz | head -n 1"
    register: helm_chart_ls

  - set_fact:
      helm_chart_location: "{{ helm_chart_ls.stdout | trim }}"

  - fail:
      msg: "The helm chart does not appear to be built. Run 'make build-helm-chart'."
    when:
    - helm_chart_location | length == 0

  - name: Install Operator via Helm
    command:
      argv:
      - "helm"
      - "upgrade"
      - "--install"
      - "--atomic"
      - "--cleanup-on-fail"
      - "--namespace={{ kiali.operator_namespace }}"
      - "--set"
      - "debug.enableProfiler={{ lookup('env', 'MOLECULE_OPERATOR_PROFILER_ENABLED') | default('true', True) }}"
      - "--set"
      - "cr.create=false"
      - "--set"
      - "image.repo={{ kiali.operator_image_name }}"
      - "--set"
      - "image.tag={{ kiali.operator_version }}"
      - "--set"
      - "image.pullPolicy={{ kiali.operator_image_pull_policy }}"
      - "--set"
      - "watchNamespace={{ kiali.operator_watch_namespace }}"
      - "--set"
      - "clusterRoleCreator={{ kiali.operator_cluster_role_creator | default('true') }}"
      - "--set"
      - "onlyViewOnlyMode={{ kiali.operator_only_view_only_mode | default('false') }}"
      - "--debug"
      - "kiali-operator"
      - "{{ helm_chart_location }}"

  - name: Make sure the CR namespace exists
    k8s:
      state: present
      api_version: v1
      kind: Namespace
      name: "{{ cr_namespace }}"

  - name: Create any NetworkPolicy needed to access the Kiali UI
    import_tasks: process-network-policy.yml
    vars:
      network_policy_state: "present"
      network_policy_namespace: "{{ kiali.install_namespace }}"

  - name: Create Kiali CR based solely on the template
    k8s:
      namespace: "{{ cr_namespace }}"
      definition: "{{ lookup('template', cr_file_path) }}"
    when:
    - prometheus_config is not defined

  - name: Create Kiali CR with specific prometheus config added
    k8s:
      namespace: "{{ cr_namespace }}"
      definition: "{{ lookup('template', cr_file_path) | from_yaml | combine({'spec':{'external_services':{'prometheus': prometheus_config }}}, recursive=True) | to_yaml }}"
    when:
    - prometheus_config is defined

  - name: Asserting that Kiali is Deployed
    k8s_info:
      api_version: v1
      kind: Deployment
      namespace: "{{ kiali.install_namespace }}"
      label_selectors:
      - app = kiali
    register: kiali_deployment
    until:
    - kiali_deployment is success
    - kiali_deployment.resources | length == 1
    - kiali_deployment.resources[0].status.availableReplicas is defined
    - kiali_deployment.resources[0].status.availableReplicas == 1
    retries: "{{ wait_retries }}"
    delay: 5
