- name: Prepare
  hosts: localhost
  connection: local
  tasks:
  - name: See if we have Service Mesh htpasswd secret for accessing external services like Prometheus
    k8s_info:
      api_version: v1
      kind: Secret
      namespace: "{{ istio.control_plane_namespace }}"
      name: htpasswd
    register: ossm_secret_htpasswd_raw

  - name: Define url and auth for Prometheus for Service Mesh
    set_fact:
      prometheus_config:
        url: "https://prometheus.{{ istio.control_plane_namespace }}.svc:9090"
        auth:
          username: internal
          type: basic
          use_kiali_token: false
          password: "{{ ossm_secret_htpasswd_raw.resources[0].data.rawPassword | b64decode }}"
    when:
    - ossm_secret_htpasswd_raw is defined
    - ossm_secret_htpasswd_raw.resources is defined
    - ossm_secret_htpasswd_raw.resources | length == 1

  - name: Produce Files with Correct Parameters
    shell: " {{ item }}"
    with_items:
    - cat {{ kiali_operator_assets_path }}/namespace.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_NAMESPACE={{ kiali.operator_namespace }}  envsubst
    - cat {{ kiali_operator_assets_path }}/crd.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} envsubst
    - cat {{ kiali_operator_assets_path }}/role_binding.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_NAMESPACE={{ kiali.operator_namespace }} envsubst
    - cat {{ kiali_operator_assets_path }}/service_account.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} envsubst
    - cat {{ kiali_operator_assets_path }}/operator.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_IMAGE_NAME={{ kiali.operator_image_name}} OPERATOR_IMAGE_VERSION={{ kiali.operator_version }} OPERATOR_IMAGE_PULL_POLICY={{ kiali.operator_image_pull_policy}} OPERATOR_WATCH_NAMESPACE={{ kiali.operator_watch_namespace }} envsubst
    - cat {{ kiali_operator_assets_path }}/role.yaml | OPERATOR_VERSION_LABEL={{ kiali.operator_version }} OPERATOR_ROLE_CLUSTERROLEBINDINGS="{{ kiali.operator_clusterrolebindings}}" OPERATOR_ROLE_CLUSTERROLES="{{ kiali.operator_clusterroles }}" OPERATOR_ROLE_CREATE="{{ kiali.operator_role_create | default('- create') }}" OPERATOR_ROLE_DELETE="{{ kiali.operator_role_delete | default('- delete') }}" OPERATOR_ROLE_PATCH="{{ kiali.operator_role_patch | default('- patch') }}" envsubst
    register: template

  - name: Parse Template Yaml Files
    set_fact:
      namespace: "{{ (template.results[0].stdout | from_yaml_all | list)[0] }}"
      crd0: "{{ (template.results[1].stdout | from_yaml_all | list)[0] }}"
      crd1: "{{ (template.results[1].stdout | from_yaml_all | list)[1] }}"
      role_binding: "{{ (template.results[2].stdout | from_yaml_all | list)[0] }}"
      service_account: "{{ (template.results[3].stdout | from_yaml_all | list)[0] }}"
      operator: "{{ (template.results[4].stdout | from_yaml_all | list)[0] }}"
      role: "{{ (template.results[5].stdout | from_yaml_all | list)[0] }}"

  - name: Combine Namespace on the Files that need it
    set_fact:
      service_account: "{{ service_account | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      role_binding: "{{ role_binding | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      role: "{{ role | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"
      operator: "{{ operator | combine({'metadata':{'namespace': kiali.operator_namespace }}, recursive=True)   }}"

  - name: Deploying Templates on Kubernetes
    k8s:
      definition: "{{ item }}"
    with_items:
    -  "{{ namespace }}"
    -  "{{ crd0 }}"
    -  "{{ crd1 }}"
    -  "{{ role }}"
    -  "{{ role_binding }}"
    -  "{{ service_account }}"
    -  "{{ operator }}"

  - name: Make sure the CR namespace exists
    k8s:
      state: present
      api_version: v1
      kind: Namespace
      name: "{{ cr_namespace }}"

  - name: Create Kiali CR based solely on the template
    k8s:
      namespace: "{{ cr_namespace }}"
      definition: "{{ lookup('template', cr_file_path) }}"
    when:
    - prometheus_config is not defined

  - name: Create Kiali CR with specific prometheus config added
    k8s:
      namespace: "{{ cr_namespace }}"
      definition: "{{ lookup('template', cr_file_path) | from_yaml | combine({'spec':{'external_services':{'prometheus': prometheus_config }}}, recursive=True) | to_yaml }}"
    when:
    - prometheus_config is defined

  - name: Asserting that Kiali is Deployed
    k8s_info:
      api_version: v1
      kind: Deployment
      namespace: "{{ kiali.install_namespace }}"
      label_selectors:
      - app = kiali
    register: kiali_deployment
    until: kiali_deployment.resources |length == 1 and kiali_deployment.resources[0].status.availableReplicas is defined and kiali_deployment.resources[0].status.availableReplicas == 1
    retries: "{{ wait_retries }}"
    delay: 5
