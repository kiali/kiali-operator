- name: Tests
  hosts: localhost
  connection: local
  vars:
    custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
  tasks:
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  # we need to fully wait to ensure all custom dashboards are installed
  - import_tasks: ../common/wait_for_kiali_cr_changes.yml

  # This test will change some config settings to make sure things work like we expect.
  # We will add additional tasks and asserts in the future to test other config changes.
  # We load in the current kiali CR and then alter it with new config.
  # We do this TWO times to check changing different settings.

  - set_fact:
      current_kiali_cr: "{{ lookup('k8s', api_version='kiali.io/v1alpha1', kind='Kiali', namespace=cr_namespace, resource_name=custom_resource.metadata.name) }}"

  - name: The current Kiali CR to be used as the base of the test
    debug:
      msg: "{{ current_kiali_cr }}"

  # First perform some sanity checks making sure some default values are as expected

  - name: Make sure the expected dashboards are installed - by default, all of them are deployed
    vars:
      custom_dashboards: "{{ query('k8s', namespace=kiali.install_namespace, kind='MonitoringDashboard', api_version='monitoring.kiali.io/v1alpha1') }}"
    assert:
      that:
      - custom_dashboards | length == 20
      fail_msg: "Must have 20 custom_dashboards: {{ custom_dashboards }}"

  # NEW CONFIG TEST #1

  - name: Set new deployment.version_label to something longer than k8s maximum of 63 chars
    vars:
      new_version_label: "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee12345678901234"
    set_fact:
      current_kiali_cr: "{{ current_kiali_cr | combine({'spec': {'deployment': {'version_label': new_version_label }}}, recursive=True) }}"

  - name: Define includes and excludes for dashboards to install, ultimately only installing the kiali.yaml dashboard
    vars:
      custom_dashboards:
        includes: [ 'kiali*', 'go.yaml' ]
        excludes: [ 'go.yaml' ]
    set_fact:
      current_kiali_cr: "{{ current_kiali_cr | combine({'spec': {'deployment': {'custom_dashboards': custom_dashboards }}}, recursive=True) }}"

  - name: Make sure health_config rates are defined
    vars:
      custom_health_config:
        rates:
        - namespace: "bookinfo"
          tolerance:
          - code: "404"
            failure: 10
            protocol: "http"
          - code: "[45]\\d[^\\D4]"
            protocol: "http"
        - namespace: ".*"
          tolerance:
          - code: "[4]\\d\\d"
            degraded: 30
            failure: 40
            protocol: "http"
          - code: "[5]\\d\\d"
            protocol: "http"
    set_fact:
      current_kiali_cr: "{{ current_kiali_cr | combine({'spec': {'health_config': custom_health_config}}, recursive=True) }}"

  - name: The new Kiali CR to be tested
    debug:
      msg: "{{ current_kiali_cr }}"

  # Deploy the new CR and wait for the CR change to take effect

  - import_tasks: ../common/set_kiali_cr.yml
    vars:
      new_kiali_cr: "{{ current_kiali_cr }}"
  - import_tasks: ../common/wait_for_kiali_cr_changes.yml
  - import_tasks: ../common/wait_for_kiali_running.yml
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  # Assert the new config

  - name: Make sure version_label was truncated properly
    assert:
      that:
      - kiali_configmap.deployment.version_label == "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee1234567890XXX"
      - "{{ kiali_deployment.resources[0].metadata.labels.version | length == 63 }}"

  - name: Make sure only the expected dashboards are installed
    vars:
      custom_dashboards: "{{ query('k8s', namespace=kiali.install_namespace, kind='MonitoringDashboard', api_version='monitoring.kiali.io/v1alpha1') }}"
    assert:
      that:
      - custom_dashboards | length == 1
      - custom_dashboards[0].metadata.name == 'kiali'
      fail_msg: "Must have 1 custom_dashboard: {{ custom_dashboards }}"

  - name: Make sure the custom health config made it to the config map
    assert:
      that:
      - kiali_configmap.health_config.rates | length == 2
      - kiali_configmap.health_config.rates[0].namespace == "bookinfo"
      - kiali_configmap.health_config.rates[0].tolerance | length == 2
      - kiali_configmap.health_config.rates[0].tolerance[0].code == "404"
      - kiali_configmap.health_config.rates[0].tolerance[0].failure == 10
      - kiali_configmap.health_config.rates[0].tolerance[0].protocol == "http"
      - kiali_configmap.health_config.rates[0].tolerance[1].code == "[45]\\d[^\\D4]"
      - kiali_configmap.health_config.rates[0].tolerance[1].failure is not defined
      - kiali_configmap.health_config.rates[0].tolerance[1].protocol == "http"
      - kiali_configmap.health_config.rates[1].namespace == ".*"
      - kiali_configmap.health_config.rates[1].tolerance | length == 2
      - kiali_configmap.health_config.rates[1].tolerance[0].degraded == 30
      - kiali_configmap.health_config.rates[1].tolerance[1].code == "[5]\\d\\d"

  # NEW CONFIG TEST #2

  - set_fact:
      current_kiali_cr: "{{ lookup('k8s', api_version='kiali.io/v1alpha1', kind='Kiali', namespace=cr_namespace, resource_name=custom_resource.metadata.name) }}"

  - name: Disable custom dashboards entirely
    set_fact:
      current_kiali_cr: "{{ current_kiali_cr | combine({'spec': {'external_services': {'custom_dashboards': {'enabled': false }}}}, recursive=True) }}"

  - name: "The new Kiali CR (2) to be tested"
    debug:
      msg: "{{ current_kiali_cr }}"

  # Deploy the new CR and wait for the CR change to take effect

  - import_tasks: ../common/set_kiali_cr.yml
    vars:
      new_kiali_cr: "{{ current_kiali_cr }}"
  - import_tasks: ../common/wait_for_kiali_cr_changes.yml
  - import_tasks: ../common/wait_for_kiali_running.yml
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  # Assert the new config

  - name: Make sure only the expected dashboards are installed
    vars:
      custom_dashboards: "{{ query('k8s', namespace=kiali.install_namespace, kind='MonitoringDashboard', api_version='monitoring.kiali.io/v1alpha1') }}"
    assert:
      that:
      - custom_dashboards | length == 0
      fail_msg: "Must have 0 custom_dashboards (they were disabled): {{ custom_dashboards }}"
