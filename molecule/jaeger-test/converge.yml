- name: Tests
  hosts: localhost
  connection: local
  collections:
  - kubernetes.core
  vars:
    custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
  tasks:
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml
  - import_tasks: ../common/wait_for_kiali_running.yml
  
  - name: Get statuses from Istio components
    uri:
      url: "{{ kiali_base_url }}/api/istio/status"
      validate_certs: no
      return_content: yes      
    register: status_response
  
  - name: "Results: /api/istio/status"
    debug:
      msg: "{{ status_response.json }}"  

  # IstioStatus API returns a statuses list of external components (Jaeger is one of them)
  # If Jaeger is in the list, it means that there is an error (Unreacheable)
  - name: Check if Jaeger status is present
    set_fact:
      jaeger_error: "{{ item.status }}"     
    loop: "{{ status_response.json }}"
    when: "item.name == 'jaeger'"
  
  - name: Assert that there is no error related to Jaeger
    assert:
      that:
      - jaeger_error is not defined

  # Update Jaeger URL to a bad URL just to test a bad integration
  - import_tasks: update-jaeger-url.yml
  - import_tasks: ../common/wait_for_kiali_cr_changes.yml
  - import_tasks: ../common/wait_for_kiali_running.yml
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  - name: Get statuses from Istio components
    uri:
      url: "{{ kiali_base_url }}/api/istio/status"
      validate_certs: no
      return_content: yes      
    register: status_response
  
  - name: "Results: /api/istio/status"
    debug:
      msg: "{{ status_response.json }}"  

  - set_fact:
      current_kiali_cr: "{{ lookup('kubernetes.core.k8s', api_version='kiali.io/v1alpha1', kind='Kiali', namespace=cr_namespace, resource_name=custom_resource.metadata.name) }}"

  - name: Check if Jaeger status is present
    set_fact:
      jaeger_error: "{{ item.status }}"     
    loop: "{{ status_response.json }}"
    when: "item.name == 'jaeger'"
  
  - name: Assert that there is an error related to Jaeger
    assert:
      that:
      - jaeger_error is defined
