- name: Tests
  hosts: localhost
  connection: local
  vars:
    custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
  tasks:
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  # Wait for Kiali to be running and accepting requests.
  # This has the added benefit of confirming that we can access a
  # Kiali endpoint that does not need authentication.
  - import_tasks: ../common/wait_for_kiali_running.yml

  - name: Make sure the test set the strategy to openshift
    assert:
      that:
      - kiali_configmap.auth.strategy == "openshift"

  - name: Assert that we can access Kiali console login screen that does not need authentication
    uri:
      url: "{{ kiali_base_url }}/console"
      validate_certs: false

  - name: Try to access Kiali api endpoint that requires authentication (should return 401)
    uri:
      url: "{{ kiali_base_url }}/api/namespaces"
      status_code: 401
      validate_certs: false

  - name: Attempt login with invalid credentials
    uri:
      url: "{{ kiali_base_url }}/api/authenticate"
      user: invalid
      password: invalid
      status_code: 500
      return_content: yes
      validate_certs: false
    register: kiali_output

  - name: Attempt login with good credentials but not logging in via OpenShift OAuth
    uri:
      url: "{{ kiali_base_url }}/api/authenticate"
      user: "{{ openshift.username }}"
      password: "{{ openshift.password }}"
      status_code: 500
      return_content: yes
      validate_certs: false
    register: kiali_output

  - name: Get the current list of access tokens so we know what sessions already exist before we log in
    k8s_info:
      api_version: oauth.openshift.io/v1
      kind: OAuthAccessToken
    register: oauthaccesstokens_original_raw

  # BEGIN A SUCCESSFUL OPENSHIFT OAUTH LOGIN PROCESS

  - name: Get /api/auth/info from Kiali Server
    uri:
      url: "{{ kiali_base_url }}/api/auth/info"
      return_content: yes
      validate_certs: false
    register: kiali_output
  - name: Assert that the auth info is for openshift and we have expected data
    assert:
      that:
      - kiali_output.json.strategy == "openshift"
      - kiali_output.json.authorizationEndpoint is search("oauth/authorize")
      - kiali_output.json.sessionInfo.keys() | length == 0
  - name: Set the auth endpoint we are being redirected to and assume our test credentials are for the htpasswd provider
    set_fact:
      auth_endpoint: "{{ kiali_output.json.authorizationEndpoint | regex_replace('\\?', '?idp=htpasswd&') }}"

  - name: Send request to oauth-openshift /oauth/authorize endpoint
    uri:
      url: "{{ auth_endpoint }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
    register: kiali_output
  - name: Assert that the auth endpoint returned valid data
    assert:
      that:
      - kiali_output.location is defined

  - name: Determine next auth2 endpoint (strip some weirdness off the location - why is ansible doing that?)
    set_fact:
      auth2_endpoint: "{{ kiali_output.location | regex_replace('\\?.+(\\/login)', '\\1') }}"

  - name: Send request to auth2 endpoint /login/htpasswd which is the OpenShift login screen
    uri:
      url: "{{ auth2_endpoint }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 200
    register: kiali_output
  - name: Assert that the auth2 endpoint returned valid data
    assert:
      that:
      - kiali_output.url is defined
      - kiali_output.set_cookie is defined
      - kiali_output.set_cookie is search("csrf")
  - name: Set post login endpoint by stripping query string and extract data needed for the next request
    set_fact:
      openshift_login_endpoint: "{{ auth2_endpoint | regex_replace('([^?]+).*', '\\1') }}"
      csrf_cookie_value: "{{ kiali_output.set_cookie | regex_replace('.*csrf=([^;]+).*', '\\1') }}"
      then_value: "{{ auth2_endpoint | regex_replace('.*then=([^&;]+).*', '\\1') | urldecode }}"

  - name: Send login post request to OpenShift login screen endpoint /login/htpasswd
    uri:
      url: "{{ openshift_login_endpoint }}"
      headers:
        Cookie: "csrf={{ csrf_cookie_value }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
      method: POST
      body_format: form-urlencoded
      body:
        username: "{{ openshift.username }}"
        password: "{{ openshift.password }}"
        csrf: "{{ csrf_cookie_value }}"
        then: "{{ then_value }}"
    register: kiali_output
  - name: Assert that the login endpoint returned valid data
    assert:
      that:
      - kiali_output.location is defined
      - kiali_output.set_cookie is defined
      - kiali_output.set_cookie is search("ssn")
  - name: Extract the preliminary ssn cookie
    set_fact:
      ssn_cookie: "{{ kiali_output.set_cookie | regex_replace('.*(ssn=[^;]+).*', '\\1') }}"

  - name: Set the final approval endpoint
    set_fact:
      openshift_approval_endpoint: "{{ auth_endpoint }}"

  - name: Send request to final approval endpoint to complete login
    uri:
      url: "{{ openshift_approval_endpoint }}"
      headers:
        Cookie: "{{ ssn_cookie }}; csrf={{ csrf_cookie_value }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
    register: kiali_output
  - name: Assert that the final approval endpoint returned valid data
    assert:
      that:
      - kiali_output.location is defined
      - kiali_output.set_cookie is defined
      - kiali_output.set_cookie is search("ssn")
  - name: Extract the final ssn cookie and the Kiali endpoint containing our token data
    set_fact:
      ssn_cookie: "{{ kiali_output.set_cookie | regex_replace('.*(ssn=[^;]+).*', '\\1') }}"
      kiali_endpoint: "{{ kiali_output.location }}"

  - name: Extract the token data from the Kiali endpoint we are being redirected to
    set_fact:
      access_token: "{{ kiali_endpoint | regex_replace('.*access_token=([^&]+).*', '\\1') }}"
      expires_in: "{{ kiali_endpoint | regex_replace('.*expires_in=([^&]+).*', '\\1') }}"
      scope: "{{ kiali_endpoint | regex_replace('.*scope=([^&]+).*', '\\1') }}"
      token_type: "{{ kiali_endpoint | regex_replace('.*token_type=([^&]+).*', '\\1') }}"

  - name: Now logged in - confirm by going to the redirected Kiali endpoint
    uri:
      url: "{{ kiali_endpoint }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 200
    register: kiali_output

  - name: Now get our Kiali token via /api/authenticate
    uri:
      url: "{{ kiali_base_url }}/api/authenticate"
      status_code: 200
      return_content: yes
      validate_certs: false
      method: POST
      body_format: form-urlencoded
      body:
        access_token: "{{ access_token }}"
        expires_in: "{{ expires_in }}"
        scope: "{{ scope }}"
        token_type: "{{ token_type }}"
    register: kiali_output
  - name: Assert that the Kiali token was returned
    assert:
      that:
      - kiali_output.set_cookie is defined
      - kiali_output.set_cookie is search("kiali-token")
      - kiali_output.json.expiresOn is defined
      - kiali_output.json.token is defined
      - kiali_output.json.username is defined

  - name: Get Kiali token from output
    set_fact:
      kiali_token_from_cookie: "{{ kiali_output.set_cookie | regex_replace('.*(kiali-token=[^;]+).*', '\\1') }}"
      kiali_token_from_json: "kiali-token={{ kiali_output.json.token }}"
  - name: Make sure set-cookie and json Kiali tokens match
    assert:
      that:
      - kiali_token_from_cookie == kiali_token_from_json

  - name: With the Kiali token, make a Kiali API request that requires authentication (should now return 200)
    uri:
      url: "{{ kiali_base_url }}/api/namespaces"
      headers:
        Cookie: "{{ kiali_token_from_cookie }}"
      return_content: yes
      validate_certs: false
    register: kiali_output
  - name: Assert that we were able to get the list of namespaces
    assert:
      that:
      - kiali_output.json | length > 0

  - name: Get the new list of access tokens - our login session should be in here now
    k8s_info:
      api_version: oauth.openshift.io/v1
      kind: OAuthAccessToken
    register: oauthaccesstokens_new_raw

  - name: Obtain our login oauth access token from the list
    set_fact:
      login_oauthaccesstoken_list_of_one: "{{ oauthaccesstokens_new_raw.resources | difference(oauthaccesstokens_original_raw.resources) }}"

  - name: Assert that we see a new login access token exists and it is as expected
    assert:
      that:
      - login_oauthaccesstoken_list_of_one | length == 1
      - login_oauthaccesstoken_list_of_one[0].clientName == 'kiali-' + kiali.install_namespace
      - login_oauthaccesstoken_list_of_one[0].userName == openshift.username
  - debug:
      msg: "OAuthAccessToken name: {{ login_oauthaccesstoken_list_of_one[0].metadata.name }}"

  # PERFORM A LOGOUT

  - name: Now log out
    uri:
      url: "{{ kiali_base_url }}/api/logout"
      headers:
        Cookie: "{{ kiali_token_from_cookie }}"
      return_content: no
      validate_certs: false
      follow_redirects: none
      status_code: 204

  - name: Our login session should be gone from the list of OAuthAccessTokens
    k8s_info:
      api_version: oauth.openshift.io/v1
      kind: OAuthAccessToken
      name: "{{ login_oauthaccesstoken_list_of_one[0].metadata.name }}"
    register: oauthaccesstokens_logout_raw

  - name: Assert that we no longer see our login access token
    assert:
      that:
      - (oauthaccesstokens_logout_raw.resources | length) == 0

