### WORKLOAD GRAPH ###

- set_fact:
    graph_test_url: "{{ kiali_base_url }}/api/namespaces/graph?namespaces={{ simple_mesh_namespace }}&graphType=workload&injectServiceNodes=false"

- name: "/namespaces/graph - workload"
  uri:
    url: "{{ graph_test_url }}"
    return_content: yes
    validate_certs: false
  register: api_results_raw

- set_fact:
    api_namespaces_graph_json: "{{ api_results_raw.json }}"

- name: "Results: /namespaces/graph: {{ graph_test_url }}"
  debug:
    msg: "{{ api_namespaces_graph_json }}"

# JMESPATH tester : https://jmespath.org/
# Note that "|[0]" simply flattens a list to a string

- name: Assert that we were able to get the graph info for the small 2-node mesh
  assert:
    that:
    - api_namespaces_graph_json is defined
    - api_namespaces_graph_json.duration is defined
    - api_namespaces_graph_json.timestamp is defined
    - api_namespaces_graph_json.graphType == "workload"
    - api_namespaces_graph_json.elements.edges | length == 1
    - api_namespaces_graph_json.elements.nodes | length == 2
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.nodeType|[0]') == "workload"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.workload|[0]') == "simple-client"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.nodeType|[0]') == "workload"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.workload|[0]') == "simple-server"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.traffic[0].protocol|[0]') == "http"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.destServices[0].name|[0]') == "simple-server-svc"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.traffic.protocol') == "http"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.source') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.id|[0]')
    - api_namespaces_graph_json | json_query('elements.edges[0].data.target') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.id|[0]')

### APP GRAPH ###

- set_fact:
    graph_test_url: "{{ kiali_base_url }}/api/namespaces/graph?namespaces={{ simple_mesh_namespace }}&graphType=app&injectServiceNodes=false"

- name: "/namespaces/graph - app"
  uri:
    url: "{{ graph_test_url }}"
    return_content: yes
    validate_certs: false
  register: api_results_raw

- set_fact:
    api_namespaces_graph_json: "{{ api_results_raw.json }}"

- name: "Results: /namespaces/graph: {{ graph_test_url }}"
  debug:
    msg: "{{ api_namespaces_graph_json }}"

- name: Assert that we were able to get the graph info for the small 2-node mesh
  assert:
    that:
    - api_namespaces_graph_json is defined
    - api_namespaces_graph_json.duration is defined
    - api_namespaces_graph_json.timestamp is defined
    - api_namespaces_graph_json.graphType == "app"
    - api_namespaces_graph_json.elements.edges | length == 1
    - api_namespaces_graph_json.elements.nodes | length == 2
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.nodeType|[0]') == "app"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.app|[0]') == "simple-client"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.nodeType|[0]') == "app"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.app|[0]') == "simple-server"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.traffic[0].protocol|[0]') == "http"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.destServices[0].name|[0]') == "simple-server-svc"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.traffic.protocol') == "http"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.source') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.id|[0]')
    - api_namespaces_graph_json | json_query('elements.edges[0].data.target') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.id|[0]')

### VERSIONED APP GRAPH ###

- set_fact:
    graph_test_url: "{{ kiali_base_url }}/api/namespaces/graph?namespaces={{ simple_mesh_namespace }}&graphType=versionedApp&injectServiceNodes=false"

- name: "/namespaces/graph - versionedApp"
  uri:
    url: "{{ graph_test_url }}"
    return_content: yes
    validate_certs: false
  register: api_results_raw

- set_fact:
    api_namespaces_graph_json: "{{ api_results_raw.json }}"

- name: "Results: /namespaces/graph: {{ graph_test_url }}"
  debug:
    msg: "{{ api_namespaces_graph_json }}"

- name: Assert that we were able to get the graph info for the small 2-node mesh
  assert:
    that:
    - api_namespaces_graph_json is defined
    - api_namespaces_graph_json.duration is defined
    - api_namespaces_graph_json.timestamp is defined
    - api_namespaces_graph_json.graphType == "versionedApp"
    - api_namespaces_graph_json.elements.edges | length == 1
    - api_namespaces_graph_json.elements.nodes | length == 2
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.nodeType|[0]') == "app"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.app|[0]') == "simple-client"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.nodeType|[0]') == "app"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.app|[0]') == "simple-server"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.traffic[0].protocol|[0]') == "http"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.destServices[0].name|[0]') == "simple-server-svc"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.traffic.protocol') == "http"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.source') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.id|[0]')
    - api_namespaces_graph_json | json_query('elements.edges[0].data.target') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.id|[0]')

### SERVICE GRAPH ###

- set_fact:
    graph_test_url: "{{ kiali_base_url }}/api/namespaces/graph?namespaces={{ simple_mesh_namespace }}&graphType=service"

- name: "/namespaces/graph - service"
  uri:
    url: "{{ graph_test_url }}"
    return_content: yes
    validate_certs: false
  register: api_results_raw

- set_fact:
    api_namespaces_graph_json: "{{ api_results_raw.json }}"

- name: "Results: /namespaces/graph: {{ graph_test_url }}"
  debug:
    msg: "{{ api_namespaces_graph_json }}"

- name: Assert that we were able to get the graph info for the small 2-node mesh
  assert:
    that:
    - api_namespaces_graph_json is defined
    - api_namespaces_graph_json.duration is defined
    - api_namespaces_graph_json.timestamp is defined
    - api_namespaces_graph_json.graphType == "service"
    - api_namespaces_graph_json.elements.edges | length == 1
    - api_namespaces_graph_json.elements.nodes | length == 2
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.nodeType|[0]') == "workload"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.workload|[0]') == "simple-client"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.nodeType|[0]') == "service"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.service|[0]') == "simple-server-svc"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.traffic[0].protocol|[0]') == "http"
    - api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.destServices[0].name|[0]') == "simple-server-svc"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.traffic.protocol') == "http"
    - api_namespaces_graph_json | json_query('elements.edges[0].data.source') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-client`].data.id|[0]')
    - api_namespaces_graph_json | json_query('elements.edges[0].data.target') == api_namespaces_graph_json | json_query('elements.nodes[] | [?data.app==`simple-server`].data.id|[0]')
