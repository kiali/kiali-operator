- name: Tests
  hosts: localhost
  connection: local
  collections:
  - kubernetes.core
  vars:
    custom_resource: "{{ lookup('template', cr_file_path) | from_yaml }}"
  tasks:
  - import_tasks: ../common/tasks.yml
  - import_tasks: ../asserts/pod_asserts.yml

  # Wait for Kiali to be running and accepting requests.
  # This has the added benefit of confirming that we can access a
  # Kiali endpoint that does not need authentication.
  - import_tasks: ../common/wait_for_kiali_running.yml

  - name: Make sure the test set the strategy to header
    assert:
      that:
      - kiali_configmap.auth.strategy == "header"

  - name: Assert that we can access Kiali console login screen that does not need authentication
    uri:
      url: "{{ kiali_base_url }}/console"
      validate_certs: false

  - name: Try to access Kiali api endpoint that requires authentication (should return error - we did not login yet)
    uri:
      url: "{{ kiali_base_url }}/api/namespaces"
      status_code: 401
      validate_certs: false
      follow_redirects: none

  # BEGIN A SUCCESSFUL HEADER LOGIN PROCESS

  - name: Step One - start
    uri:
      url: "{{ proxy.url }}/oauth2/start?rd=%2F"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
      method: GET
    register: kiali_output
  - name: Assert step one
    assert:
      that:
      - kiali_output.location is defined
      - kiali_output.set_cookie is defined

  - set_fact:
      oauth_cookie1: "{{ kiali_output.set_cookie | regex_replace('([^;]+).*', '\\1') }}"

  - name: Step two - auth request
    uri:
      url: "{{ kiali_output.location }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
      method: GET
    register: kiali_output
  - name: Assert step two
    assert:
      that:
      - kiali_output.location is defined

  - name: Step three - local login (strip some weirdness in the location URL)
    uri:
      url: "{{ kiali_output.location | regex_replace('\\?.+(\\/auth\\/local)', '\\1') }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 303
      method: POST
      body_format: form-urlencoded
      body:
        login: "{{ proxy.username }}"
        password: "{{ proxy.password }}"
    register: kiali_output
  - name: Assert step three
    assert:
      that:
      - kiali_output.location is defined

  - name: Step four - approval (strip some weirdness off the location - why is ansible doing that?)
    uri:
      url: "{{ kiali_output.location | regex_replace('\\?req.+(\\/approval)', '\\1') }}"
      headers:
        Cookie: "{{ oauth_cookie1 }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 303
      method: GET
    register: kiali_output
  - name: Assert step four
    assert:
      that:
      - kiali_output.location is defined

  - name: Step five - callback (strip some weirdness off the location - why is ansible doing that?)
    uri:
      url: "{{ kiali_output.location | regex_replace('\\?req.+(\\/oauth2)', '\\1') }}"
      headers:
        Cookie: "{{ oauth_cookie1 }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
      method: GET
    register: kiali_output
  - name: Assert step four
    assert:
      that:
      - kiali_output.location is defined

  - set_fact:
      oauth_cookie2: "{{ kiali_output.set_cookie | regex_replace('([^;]+).*', '\\1') }}"

  - name: Step six - get bearer token
    uri:
      url: "{{ kiali_output.location }}"
      headers:
        Cookie: "{{ oauth_cookie2 }}"
      return_content: yes
      validate_certs: false
      follow_redirects: none
      status_code: 302
      method: GET
    register: kiali_output
  - name: Assert step five
    assert:
      that:
      - kiali_output.authorization is defined

  - set_fact:
      bearer_token: "{{ kiali_output.authorization | regex_replace('.*Bearer (.*)', '\\1') }}"

  - name: Make a request that requires authentication (should now return 200)
    uri:
      url: "{{ kiali_base_url }}/api/namespaces"
      headers:
        Authorization: "Bearer {{ bearer_token }}"
      return_content: yes
      validate_certs: false
    register: kiali_output
  - name: Assert that we were able to get the list of namespaces
    assert:
      that:
      - kiali_output.json | length > 0
