- name: Get Prometheus HTTP endpoint route (this test requires a HTTP route to the Prometheus endpoint)
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: prometheus
    namespace: "{{ istio.control_plane_namespace }}"
  register: prometheus_route_raw
  until:
  - prometheus_route_raw['resources'] is defined
  - prometheus_route_raw['resources'][0] is defined
  - prometheus_route_raw['resources'][0]['status'] is defined
  - prometheus_route_raw['resources'][0]['status']['ingress'] is defined
  - prometheus_route_raw['resources'][0]['status']['ingress'][0] is defined
  - prometheus_route_raw['resources'][0]['status']['ingress'][0]['host'] is defined
  retries: 10
  delay: 6
  when:
  - is_openshift == True

- name: Create Prometheus Ingress so our tests can query for metrics
  k8s:
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/secure-backends: "false"
        labels:
          app: kiali
          version: dev
        name: prometheus
        namespace: "{{ istio.control_plane_namespace }}"
      spec:
        rules:
        - http:
            paths:
            - backend:
                serviceName: prometheus
                servicePort: 9090
              path: /
  when:
  - is_k8s == True

- set_fact:
    prometheus_url: "http://{{ prometheus_route_raw['resources'][0]['status']['ingress'][0]['host'] }}/api/v1"
  when:
  - is_openshift == True

- name: Set prometheus ingress URL on Kubernetes environment
  set_fact:
    prometheus_url: "http://{{ lookup('env', 'MOLECULE_MINIKUBE_IP') }}/api/v1"
  when:
  - is_k8s == True
- name: Wait for Prometheus Ingress to start on the k8s cluster
  uri:
    url: "{{ prometheus_url }}//query?query=up"
  retries: 20
  delay: 6
  when:
  - is_k8s == True

- name: Tell user to ensure minikube has the correct time otherwise the metric tests will fail
  debug:
    msg: "If a metric test fails, run this to ensure the clock is reset: minikube ssh -- docker run -i --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i date -u $(date -u +%m%d%H%M%Y)"
  when:
  - is_k8s == True
