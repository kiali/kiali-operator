- name: Get information about the cluster
  set_fact:
    api_groups: "{{ lookup('kubernetes.core.k8s', cluster_info='api_groups') }}"
- name: Determine the cluster type
  set_fact:
    is_openshift: "{{ True if 'route.openshift.io' in api_groups else False }}"
    is_k8s: "{{ False if 'route.openshift.io' in api_groups else True }}"
    is_minikube: "{{ True if lookup('env', 'MOLECULE_CLUSTER_TYPE') == 'minikube' else False }}"
    is_kind: "{{ True if lookup('env', 'MOLECULE_CLUSTER_TYPE') == 'kind' else False }}"
- name: Determine the Istio implementation
  set_fact:
    is_maistra: "{{ True if 'maistra.io' in api_groups else False }}"

- name: Get SMCP if running in Maistra environment
  k8s_info:
    api_version: maistra.io/v2
    kind: ServiceMeshControlPlane
    namespace: "{{ istio.control_plane_namespace }}"
  register: maistra_smcp
  when:
  - is_maistra == True

- name: There must one and only one SMCP already installed in the control plane
  set_fact:
    maistra_smcp: "{{ maistra_smcp.resources[0] }}"
  when:
  - is_maistra == True

- name: Get Kiali CR if present
  set_fact:
    kiali_cr: "{{ lookup('kubernetes.core.k8s', api_version='kiali.io/v1alpha1', kind='Kiali', namespace=cr_namespace, resource_name=custom_resource.metadata.name) }}"

- name: Get Kiali Operator Pod
  k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ kiali.operator_namespace }}"
    label_selectors:
    - app.kubernetes.io/name = kiali-operator
  register: kiali_operator_pod

- name: Get Kiali Pod
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
  k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ kiali.install_namespace }}"
    label_selectors:
    - "app.kubernetes.io/instance={{ instance_name }}"
  register: kiali_pod

- name: Get Kiali Configmap
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
  set_fact:
    kiali_configmap: "{{ lookup('kubernetes.core.k8s', api_version='v1', kind='ConfigMap', namespace=kiali.install_namespace, resource_name=instance_name) }}"

- name: Format Configmap
  set_fact:
    kiali_configmap: "{{ kiali_configmap.data['config.yaml'] | from_yaml }}"

- name: Get Kiali Deployment
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ kiali.install_namespace }}"
    label_selectors:
    - "app.kubernetes.io/instance={{ instance_name }}"
  register: kiali_deployment

- name: Get Kiali Service
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
  k8s_info:
    api_version: v1
    kind: Service
    namespace: "{{ kiali.install_namespace }}"
    label_selectors:
    - "app.kubernetes.io/instance={{ instance_name }}"
  register: kiali_service

- name: Get Kiali Route
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: "{{ kiali.install_namespace }}"
    label_selectors:
    - "app.kubernetes.io/instance={{ instance_name }}"
  register: kiali_route
  when:
  - is_openshift == True

- name: Determine the Kiali Route URL on OpenShift
  vars:
    web_root: "{{ kiali_configmap.server.web_root if kiali_configmap.server.web_root != '/' else '' }}"
  set_fact:
    kiali_base_url: "https://{{ kiali_route.resources[0].spec.host }}{{ web_root }}"
  when:
  - is_openshift == True

# To avoid problems with Ingress/Minikube conflicts, if installing multiple kiali instances set web_root to the instance name
- name: Determine the Kiali Ingress URL on minikube
  vars:
    instance_name: "{{ kiali.instance_name | default('kiali') }}"
    web_root: "{{ kiali_configmap.server.web_root if kiali_configmap.server.web_root != '/' else '' }}"
  set_fact:
    kiali_base_url: "https://{{ lookup('env', 'MOLECULE_MINIKUBE_IP') }}{{ web_root }}"
  when:
  - is_minikube == True

- name: Determine the Kiali Ingress URL on kind
  set_fact:
    kiali_base_url: "http://{{ kiali_service.resources[0].status.loadBalancer.ingress[0].ip }}:20001/kiali"
  when:
  - is_kind == True
