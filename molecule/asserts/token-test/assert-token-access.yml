# Wait for Kiali to be running and accepting requests.
- import_tasks: ../common/wait_for_kiali_running.yml

# Assert that we can access Kiali console login screen that does not need authentication
- name: Get the console login screen from Kiali
  uri:
    url: "{{ kiali_base_url }}/console"
    validate_certs: false

# Try to access Kiali api endpoint that requires authentication (should return 401)
- name: Attempt unauthorized access to api endpoint
  uri:
    url: "{{ kiali_base_url }}/api/namespaces"
    status_code: 401
    validate_certs: false

# Try to log in with invalid token credentials
- name: Attempt login with invalid token credentials
  uri:
    url: "{{ kiali_base_url }}/api/authenticate"
    method: POST
    body_format: form-urlencoded
    body:
      token: invalid
    status_code: 401
    return_content: yes
    validate_certs: false
  register: kiali_output

# Log in with good token credentials
- name: Log in with good token credentials
  uri:
    url: "{{ kiali_base_url }}/api/authenticate"
    method: POST
    body_format: form-urlencoded
    body:
      token: "{{ test_token }}"
    return_content: yes
    validate_certs: false
  register: kiali_output
- name: Assert that we were able to authenticate our token
  assert:
    that:
    - kiali_output.json.username is defined
    - kiali_output.json.username == "{{ sa_namespace }}:default"

# With the login token, make a request to that same endpoint that requires authentication (should now return 200)
- name: Make authorized access to api endpoint
  uri:
    url: "{{ kiali_base_url }}/api/namespaces"
    headers:
      Cookie: "{{ kiali_output.cookies_string }}"
    return_content: yes
    status_code: 200
    validate_certs: false
  register: kiali_output
- name: Assert that we got json back
  assert:
    that:
    - kiali_output.json is defined
