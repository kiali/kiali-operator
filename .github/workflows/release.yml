name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'     
        required: true
        default: 'auto' 
        type: choice
        options:
        - auto
        - edge
        - minor
        - patch
        - snapshot.0
        - snapshot.1
        - snapshot.2
        - snapshot.3
      release_branch:
        description: Branch to release
        required: true
        default: master
        type: string
      quay_repository:
        description: Quay repository    
        type: string
        default: quay.io/kiali/kiali-operator
        required: true
  
jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-20.04
    outputs:
      release_type: ${{ steps.release_type.outputs.release_type }}
      release_version: ${{ steps.release_version.outputs.release_version }}
      branch_version: ${{ steps.branch_version.outputs.branch_version }}
      next_version: ${{ steps.next_version.outputs.next_version }}
      quay_tag: ${{ steps.quay_tag.outputs.quay_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.release_branch }}       

    - name: Prepare scripts
      run: |
        cat <<-EOF > bump.py
        import sys
        release_type = sys.argv[1]
        version = sys.argv[2]
        parts = version.split('.')
        major = int(parts[0][1:])
        minor = int(parts[1])
        patch = int(parts[2])
        if release_type == 'major':
            major = major + 1
            minor = 0
            patch = 0
        elif release_type == 'minor':
            minor = minor + 1 
            patch = 0
        elif release_type == 'patch':
            patch = patch + 1
        print('.'.join(['v' + str(major), str(minor), str(patch)]))
        EOF
        
        cat <<'EOF' > release_type.sh
        BASE_DATE=${BASE_DATE:-$(date -d '2021-12-03' '+%s')} # Use last day of Sprint #66 as the base date for calcs
        NOW_DATE=${NOW_DATE:-$(date -d 'now' '+%s')}
        # Transitional calculations
        DATE_DIFF=$(( $NOW_DATE - $BASE_DATE ))
        DAYS_ELAPSED=$(( $DATE_DIFF / (24*60*60) ))
        WEEKS_ELAPSED=$(( $DAYS_ELAPSED / 7))
        # This value will be used to determine the type of the release
        WEEKS_MOD3=$(( $WEEKS_ELAPSED % 3 ))
        # Between Dec 23th 2021 and Jan 14th 2022, use Mod6 (six-week sprint)
        if [ $NOW_DATE -ge $(date -d '2021-12-23' '+%s') ] && [ $NOW_DATE -lt $(date -d '2022-01-14' '+%s') ];
        then
        WEEKS_MOD3=$(( $WEEKS_ELAPSED % 6 ))
        fi
        case $WEEKS_MOD3 in
        0)
            RELEASE_TYPE='minor' ;;
        1)
            RELEASE_TYPE='snapshot.0' ;;
        2)
            RELEASE_TYPE='snapshot.1' ;;
        3)
            RELEASE_TYPE='snapshot.2' ;;
        4)
            RELEASE_TYPE='snapshot.3' ;;
        5)
            RELEASE_TYPE='snapshot.4' ;;
        esac
        # Print the determined type
        echo $RELEASE_TYPE
        EOF      

        chmod +x release_type.sh

    - name: Determine release type
      id: release_type        
      run: |
        if [[ ${{ github.event.inputs.release_type }} == "auto" ]];
        then
          echo "::set-output name=release_type::$(sh release_type.sh)"
        else
          echo "::set-output name=release_type::${{ github.event.inputs.release_type }}"
        fi
    
    - name: Determine release version
      env:
        RELEASE_TYPE: ${{ steps.release_type.outputs.release_type }}
      id: release_version
      run: |
        RAW_VERSION=$(sed -rn 's/^VERSION \?= (.*)/\1/p' Makefile)

        # Remove any pre release identifier (ie: "-SNAPSHOT")
        RELEASE_VERSION=${RAW_VERSION%-*}

        if [[ $RELEASE_TYPE == "patch" ]]
        then
          RELEASE_VERSION=$(python bump.py $RELEASE_TYPE $RELEASE_VERSION)
        elif [[ $RELEASE_TYPE == *"snapshot"* ]]
        then
          RELEASE_VERSION="$RELEASE_VERSION-$RELEASE_TYPE"
        elif [[ $RELEASE_TYPE == "minor" ]]
        then
          RELEASE_VERSION=$RELEASE_VERSION
        elif [[ $RELEASE_TYPE == "edge" ]]
        then
          RELEASE_VERSION=latest
        fi

        echo "::set-output name=release_version::$RELEASE_VERSION"      
    
    - name: Determine next version
      env:
        RELEASE_TYPE: ${{ steps.release_type.outputs.release_type }}
        RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}
      id: next_version
      if: ${{ steps.release_type.outputs.release_type == 'patch' || steps.release_type.outputs.release_type == 'minor' }}
      run: |
        if [[ $RELEASE_TYPE == "patch" ]]
        then
            NEXT_VERSION=$(python bump.py $RELEASE_TYPE $RELEASE_VERSION)
        elif [[ $RELEASE_TYPE == "minor" ]]
        then 
            NEXT_VERSION=$(python bump.py $RELEASE_TYPE $RELEASE_VERSION)          
        fi

        echo "::set-output name=next_version::$NEXT_VERSION"

    - name: Determine branch version
      env:
        RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}      
      id: branch_version
      if: ${{ steps.release_type.outputs.release_type != 'edge' && !contains(steps.release_type.outputs.release_type, 'snapshot') }}
      run: echo "::set-output name=branch_version::$(echo $RELEASE_VERSION | sed 's/\.[0-9]*\+$//')"      

    - name: Determine Quay tag
      env:
        RELEASE_TYPE: ${{ steps.release_type.outputs.release_type }}
        RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}
        BRANCH_VERSION: ${{ steps.branch_version.outputs.branch_version }}
      id: quay_tag
      run: |
        QUAY_TAG="${{ github.event.inputs.quay_repository }}:$RELEASE_VERSION"
        
        if [[ $RELEASE_TYPE == "minor" ]] || [ $RELEASE_TYPE == "patch" ]]
        then
          QUAY_TAG="$QUAY_TAG ${{ github.event.inputs.quay_repository }}:$BRANCH_VERSION"
        fi

        echo "::set-output name=quay_tag::$QUAY_TAG"
    
    - name: Cleanup
      run: rm bump.py release_type.sh

    - name: Log information
      run: |
        echo "Release type: ${{ steps.release_type.outputs.release_type }}"
      
        echo "Release version: ${{ steps.release_version.outputs.release_version }}"
                  
        echo "Next version: ${{ steps.next_version.outputs.next_version }}"

        echo "Branch version: ${{ steps.branch_version.outputs.branch_version }}"
        
        echo "Quay tag": ${{ steps.quay_tag.outputs.quay_tag }}

  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [initialize]
    env:
      RELEASE_TYPE: ${{ needs.initialize.outputs.release_type }}      
      RELEASE_VERSION: ${{ needs.initialize.outputs.release_version }}
      BRANCH_VERSION: ${{ needs.initialize.outputs.branch_version }}
      NEXT_VERSION: ${{ needs.initialize.outputs.next_version }}      
      RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
      OPERATOR_QUAY_TAG: ${{ needs.initialize.outputs.quay_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.release_branch }}  
    
    - name: Set version to release
      run: sed -i -r "s/^VERSION \?= (.*)/VERSION \?= $RELEASE_VERSION/" Makefile

    - name: Build and push image
      run: |              
        docker login -u ${{ secrets.QUAY_USER }} -p ${{ secrets.QUAY_PASSWORD }} quay.io
        
        make -e DOCKER_CLI_EXPERIMENTAL=enabled container-multi-arch-push-kiali-operator-quay
    
    - name: Configure git
      run: |
        git config user.email 'kiali-dev@googlegroups.com'
        
        git config user.name 'kiali-bot'

    - name: Create tag 
      if: ${{ needs.initialize.outputs.release_type != 'edge' }}
      run: |
        git add Makefile
        
        git commit -m "Release $RELEASE_VERSION"
        
        git push origin $(git rev-parse HEAD):refs/tags/$RELEASE_VERSION
        
    - name: Create release
      if: ${{ needs.initialize.outputs.release_type != 'edge' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ $RELEASE_TYPE == *"snapshot"* ]]; then export PRERELEASE="-p"; fi

        gh release create $RELEASE_VERSION $PRERELEASE -t "Kiali $RELEASE_VERSION"
    
    - name: Create or update version branch      
      if: ${{ needs.initialize.outputs.release_type != 'edge' && !contains(needs.initialize.outputs.release_type, 'snapshot') }}
      run: git push origin $(git rev-parse HEAD):refs/heads/$BRANCH_VERSION

    - name: Create a PR to prepare for next version
      env:
        BUILD_TAG: kiali-operator-release-${{ github.run_number }}-main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ needs.initialize.outputs.release_type == 'minor' }}
      run: |
        sed -i -r "s/^VERSION \?= (.*)/VERSION \?= $NEXT_VERSION-SNAPSHOT/" Makefile
        
        git add Makefile
        
        git commit -m "Prepare for next version"
        
        git push origin $(git rev-parse HEAD):refs/heads/$BUILD_TAG
        
        gh pr create -t "Prepare for next version" -b "Please, merge to update version numbers and prepare for release $NEXT_VERSION." -H $BUILD_TAG -B $RELEASE_BRANCH